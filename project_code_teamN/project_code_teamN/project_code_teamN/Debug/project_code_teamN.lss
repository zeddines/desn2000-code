
AVRASM ver. 2.2.8  C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm Thu Aug 10 09:47:34 2023

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(16): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(7): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\motor.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(8): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LCD.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(10): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(7): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\motor.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(8): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LCD.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(22): warning: Register r27 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(23): warning: Register r26 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(24): warning: Register r29 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(25): warning: Register r28 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(30): warning: Register r17 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(35): warning: Register r21 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(36): warning: Register r22 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(43): warning: Register r16 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(44): warning: Register r17 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(47): warning: Register r18 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(48): warning: Register r21 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(11): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm(12): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(7): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\motor.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(8): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LCD.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm(16): warning: .def: 'countl' redefinition (r24->r24)
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(11): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm(16): warning: Register r24 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(11): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm(17): warning: .def: 'counth' redefinition (r25->r25)
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(11): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm(17): warning: Register r25 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(11): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm(21): warning: Register r16 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(11): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm(22): warning: Register r17 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(11): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm(23): warning: Register r18 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(11): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm(24): warning: Register r19 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(11): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm(25): warning: Register r15 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(11): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(14): warning: .def: 'cur_floor' redefinition (r21->r21)
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(14): warning: Register r21 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(18): warning: .def: 'cur_floor' redefinition (r21->r21)
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(18): warning: Register r21 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(19): warning: Register r16 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(20): warning: Register r17 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(21): warning: Register r24 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(22): warning: Register r19 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(25): warning: Register r20 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(26): warning: Register r19 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(27): warning: Register r17 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(29): warning: Register r21 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(32): warning: .def: 'request_size' redefinition (r16->r16)
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(32): warning: Register r16 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(13): warning: .def: 'ktemp' redefinition (r16->r16)
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(13): warning: Register r16 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(14): warning: .def: 'row' redefinition (r17->r17)
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(14): warning: Register r17 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(15): warning: .def: 'col' redefinition (r24->r24)
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(15): warning: Register r24 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(16): warning: .def: 'mask' redefinition (r19->r19)
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(16): warning: Register r19 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(17): warning: Register r20 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(18): warning: Register r23 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(19): warning: Register r22 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(20): warning: Register r26 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(18): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\ext_interrupts.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\ext_interrupts.asm(10): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(7): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\motor.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(8): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LCD.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(19): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm(9): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(7): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\motor.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(8): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LCD.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm(12): warning: Register r27 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(19): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm(13): warning: Register r28 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(19): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm(14): warning: Register r29 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(19): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm(17): warning: Register r24 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(19): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm(18): warning: Register r25 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(19): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm(19): warning: Register r22 already defined by the .DEF directive
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(19): 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm' included form here
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(20): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(29): warning: Register r22 already defined by the .DEF directive
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(16): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m2560def.inc'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(17): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(7): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\motor.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(8): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LCD.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm(10): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(10): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(7): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\motor.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(8): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LCD.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm(11): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LED.asm(12): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(7): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\motor.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(8): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LCD.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(18): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\ext_interrupts.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\ext_interrupts.asm(10): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(7): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\motor.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(8): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LCD.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(19): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\timers.asm(9): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(7): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\motor.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(8): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\LCD.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\utility.asm(9): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\keypad.asm'
C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\main.asm(20): Including file 'C:\Users\Bertram\Documents\Atmel Studio\7.0\project_code_teamN\project_code_teamN\project_code_teamN\states.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; lab03.asm
                                 ;
                                 ; Created: 7/11/2023 4:51:37 PM
                                 ; Author : Bertram
                                 ;
                                 .cseg
000000 940c 0488                 	jmp reset
000002 940c 0424                 	jmp ext_int0
000004 940c 043a                 	jmp ext_int1
                                 .org OVF0addr
00002e 940c 0450                 	jmp Timer0OVF
                                 .org OVF4addr
00005a 940c 0476                 	jmp Timer4OVF
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .include "utility.asm"
                                 
                                  * utility.asm
                                  *
                                  *  Created: 8/10/2023 12:35:22 AM
                                  *   Author: Bertram
                                  */ 
                                 .include "motor.asm"
                                 
                                  * motor.asm
                                  *
                                  *  Created: 8/9/2023 7:21:51 PM
                                  *   Author: Bertram
                                  */ 
                                 
                                  #ifndef _MOTOR_
                                  #define _MOTOR_
                                 //@0 (lsb) and @1 (hsb) is compare match
                                 //80% high = 52428
                                 //20% high = 13107
                                 .macro start_motor_t3
                                 	sts OCR3BL, @0
                                 	sts OCR3BH, @1
                                 	ldi temp, (1<<CS30)
                                 	sts TCCR3B, temp
                                 	ldi temp, (1<<WGM30)|(1<<COM3B1)
                                 	sts TCCR3A, temp
                                 .endmacro
                                 
                                 .macro stop_motor_t3
                                 	clr temp
                                 	sts TCCR3B, temp
                                 	sts TCCR3A, temp
                                 	sts OCR3BL, temp
                                 	sts OCR3BH, temp
                                 	lds temp, door_closing
                                 	cpi temp, 0
                                 	breq end_stop_motor_t3
                                 	ldi temp, close
                                 	sts door_state, temp
                                 	clr temp
                                 	sts door_closing, temp
                                 end_stop_motor_t3:
                                 .endmacro
                                 #endif
                                 .include "LCD.asm"
                                 
                                  * LCD.asm
                                  *
                                  *  Created: 8/9/2023 7:20:47 PM
                                  *   Author: Bertram
                                  */ 
                                 
                                  #ifndef _LCD_
                                  #define _LCD_
                                 
                                 //symbolic names in update_lcd 
                                 .def cur_floor_lcd=r21
                                 .def next_stop_lcd=r22
                                 .def do_lcd_input=r16
                                 .def display_number_arg=r17
                                 
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 
                                 
                                 .macro do_lcd_command
                                 	ldi do_lcd_input, @0
                                 	rcall lcd_command
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_data
                                 	ldi do_lcd_input, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro lcd_set
                                 	sbi PORTA, @0
                                 .endmacro
                                 
                                 .macro lcd_clr
                                 	cbi PORTA, @0
                                 .endmacro
                                 
                                 .cseg
                                 ////////////////update floor number and direction on lcd based on current////////////////
                                 ////////////////floor and current direction/////////////////////////////
                                 update_lcd:
                                 	//prologue
00005c 935f                      	push cur_floor_lcd
00005d 936f                      	push next_stop_lcd
00005e 930f                      	push do_lcd_input
00005f 936f                      	push temp
                                 	//body
000060 e001
000061 d08d
000062 d09c                      	do_lcd_command 0b00000001 //clear display
000063 e403
000064 d091
000065 d099                      	do_lcd_data 'C'
000066 e705
000067 d08e
000068 d096                      	do_lcd_data 'u'
000069 e702
00006a d08b
00006b d093                      	do_lcd_data 'r'
00006c e702
00006d d088
00006e d090                      	do_lcd_data 'r'
00006f e605
000070 d085
000071 d08d                      	do_lcd_data 'e'
000072 e60e
000073 d082
000074 d08a                      	do_lcd_data 'n'
000075 e704
000076 d07f
000077 d087                      	do_lcd_data 't'
000078 e200
000079 d07c
00007a d084                      	do_lcd_data ' '
00007b e606
00007c d079
00007d d081                      	do_lcd_data 'f'
00007e e60c
00007f d076
000080 d07e                      	do_lcd_data 'l'
000081 e60f
000082 d073
000083 d07b                      	do_lcd_data 'o'
000084 e60f
000085 d070
000086 d078                      	do_lcd_data 'o'
000087 e702
000088 d06d
000089 d075                      	do_lcd_data 'r'
00008a e200
00008b d06a
00008c d072                      	do_lcd_data ' '
                                 	//mov display_number_arg, cur_floor_lcd
00008d 9110 020c                 	lds display_number_arg, current_floor
00008f d04d                      	rcall display_number
000090 ec00
000091 d05d
000092 d06c                      	do_lcd_command 0b11000000
000093 e40e
000094 d061
000095 d069                      	do_lcd_data 'N'
000096 e605
000097 d05e
000098 d066                      	do_lcd_data 'e'
000099 e708
00009a d05b
00009b d063                      	do_lcd_data 'x'
00009c e704
00009d d058
00009e d060                      	do_lcd_data 't'
00009f e200
0000a0 d055
0000a1 d05d                      	do_lcd_data ' '
0000a2 e703
0000a3 d052
0000a4 d05a                      	do_lcd_data 's'
0000a5 e704
0000a6 d04f
0000a7 d057                      	do_lcd_data 't'
0000a8 e60f
0000a9 d04c
0000aa d054                      	do_lcd_data 'o'
0000ab e700
0000ac d049
0000ad d051                      	do_lcd_data 'p'
0000ae e200
0000af d046
0000b0 d04e                      	do_lcd_data ' '
0000b1 9160 020e                 	lds temp, rqs
0000b3 3060                      	cpi temp, 0
0000b4 f099                      	breq update_lcd_empty_queue
0000b5 9110 0200                 	lds display_number_arg, request
0000b7 d025                      	rcall display_number
0000b8 e200
0000b9 d03c
0000ba d044                      	do_lcd_data ' '
0000bb e200
0000bc d039
0000bd d041                      	do_lcd_data ' '
0000be 9160 020d                 	lds temp, current_direction
0000c0 3060                      	cpi temp, ascend
0000c1 f099                      	breq update_lcd_up
0000c2 c016                      	rjmp update_lcd_down
                                 	//epilogue
                                 update_lcd_end:
0000c3 916f                      	pop temp
0000c4 910f                      	pop do_lcd_input
0000c5 916f                      	pop next_stop_lcd
0000c6 915f                      	pop cur_floor_lcd
0000c7 9508                      	ret
                                 
                                 update_lcd_empty_queue:
0000c8 e20d
0000c9 d02c
0000ca d034                      	do_lcd_data '-'
0000cb e200
0000cc d029
0000cd d031                      	do_lcd_data ' '
0000ce e200
0000cf d026
0000d0 d02e                      	do_lcd_data ' '
0000d1 e20d
0000d2 d023
0000d3 d02b                      	do_lcd_data '-'
0000d4 cfee                      	rjmp update_lcd_end
                                 
                                 update_lcd_up:
0000d5 e505
0000d6 d01f
0000d7 d027                      	do_lcd_data 'U'
0000d8 cfea                      	rjmp update_lcd_end
                                 
                                 update_lcd_down:
0000d9 e404
0000da d01b
0000db d023                      	do_lcd_data 'D'
0000dc cfe6                      	rjmp update_lcd_end
                                 	
                                 
                                 //argument: r21=display_number_arg(number 1-10 to be displayed on lcd)
                                 display_number:
0000dd 930f                      	push do_lcd_input
0000de 931f                      	push display_number_arg
                                 
0000df 301a                      	cpi display_number_arg, 10
0000e0 f03c                      	brlt display_normal
                                 	//display ten
0000e1 e301
0000e2 d013
0000e3 d01b                      	do_lcd_data '1'
0000e4 e300
0000e5 d010
0000e6 d018                      	do_lcd_data '0'
0000e7 c004                      	rjmp display_number_end
                                 display_normal:
0000e8 e300                      	ldi do_lcd_input, 0b00110000 ; ascii for '0'
0000e9 0f01                      	add do_lcd_input, display_number_arg ; Convert the digit to ASCII character
0000ea d00b                      	rcall lcd_data
0000eb d013                      	rcall lcd_wait ; Display the digit on the LCD 
                                 
                                 display_number_end:
0000ec 911f                      	pop display_number_arg
0000ed 910f                      	pop do_lcd_input
0000ee 9508                      	ret
                                 
                                 ////////////////lcd helper functions//////////////////
                                 //write to lcd instruction register
                                 lcd_command:
0000ef bb01                      	out PORTF, do_lcd_input
0000f0 d01f                      	rcall sleep_1ms
0000f1 9a16                      	lcd_set LCD_E
0000f2 d01d                      	rcall sleep_1ms
0000f3 9816                      	lcd_clr LCD_E
0000f4 d01b                      	rcall sleep_1ms
0000f5 9508                      	ret
                                 
                                 //write to lcd data register
                                 lcd_data:
0000f6 bb01                      	out PORTF, do_lcd_input
0000f7 9a17                      	lcd_set LCD_RS
0000f8 d017                      	rcall sleep_1ms
0000f9 9a16                      	lcd_set LCD_E
0000fa d015                      	rcall sleep_1ms
0000fb 9816                      	lcd_clr LCD_E
0000fc d013                      	rcall sleep_1ms
0000fd 9817                      	lcd_clr LCD_RS
0000fe 9508                      	ret
                                 
                                 //delays for lcd
                                 lcd_wait:
0000ff 930f                      	push r16
000100 2700                      	clr r16
000101 bb00                      	out DDRF, r16
000102 bb01                      	out PORTF, r16
000103 9a15                      	lcd_set LCD_RW
                                 lcd_wait_loop:
000104 d00b                      	rcall sleep_1ms
000105 9a16                      	lcd_set LCD_E
000106 d009                      	rcall sleep_1ms
000107 b10f                      	in r16, PINF
000108 9816                      	lcd_clr LCD_E
000109 fd07                      	sbrc r16, 7
00010a cff9                      	rjmp lcd_wait_loop
00010b 9815                      	lcd_clr LCD_RW
00010c ef0f                      	ser r16
00010d bb00                      	out DDRF, r16
00010e 910f                      	pop r16
00010f 9508                      	ret
                                 #endif
                                 .include "keypad.asm"
                                 
                                  * keypad.asm
                                  *
                                  *  Created: 8/9/2023 7:21:05 PM
                                  *   Author: Bertram
                                  */
                                 
                                  #ifndef _KEYPAD_
                                  #define _KEYPAD_
                                  .include "states.asm"
                                 
                                  * states.asm
                                  *
                                  *  Created: 8/10/2023 3:42:50 AM
                                  *   Author: Bertram
                                  */
                                  #ifndef _STATES_
                                  #define _STATES_
                                 
                                  .include "utility.asm"
                                 
                                  * utility.asm
                                  *
                                  *  Created: 8/10/2023 12:35:22 AM
                                  *   Author: Bertram
                                  */ 
                                 .include "motor.asm"
                                 
                                  * motor.asm
                                  *
                                  *  Created: 8/9/2023 7:21:51 PM
                                  *   Author: Bertram
                                  */ 
                                 
                                  #ifndef _MOTOR_
                                 #endif
                                 .include "LCD.asm"
                                 
                                  * LCD.asm
                                  *
                                  *  Created: 8/9/2023 7:20:47 PM
                                  *   Author: Bertram
                                  */ 
                                 
                                  #ifndef _LCD_
                                 #endif
                                 .include "keypad.asm"
                                 
                                  * keypad.asm
                                  *
                                  *  Created: 8/9/2023 7:21:05 PM
                                  *   Author: Bertram
                                  */
                                 
                                  #ifndef _KEYPAD_
                                 #endif
                                 
                                 #ifndef _UTILITY_
                                 #define _UTILITY_
                                 
                                 .equ F_CPU = 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 //argument for nested delay
                                 .def countl=r24
                                 .def counth=r25
                                 
                                 //symbolic names in delay
                                 .def ih=r27
                                 .def il=r26
                                 .def ih2=r29
                                 .def il2=r28
                                 
                                 
                                 //symbolic names in insert_request
                                 .def asize=r10
                                 .def aindex=r17
                                 .def aindexr=r18
                                 .def num=r19
                                 .def value=r11
                                 .def numr=r20
                                 .def reg_cur=r21
                                 .def req_cur=r22
                                 .def cur_f=r5
                                 .def dir=r6
                                 //y is used
                                 //x is used
                                 
                                 //symbolic names in dequeue_request
                                 .def request_size=r16
                                 .def request_index=r17
                                 
                                 //symbolic names in update_floor
                                 .def direction=r18
                                 .def cur_floor=r21
                                 
                                 .macro refresh_lcd
                                 	rcall update_direction
                                 	rcall update_lcd
                                 .endmacro
                                 
                                 .macro shiftl_inc
                                 	lsl @0
                                 	inc @0
                                 .endmacro
                                 
                                 //@0=register, @1=dseg name
                                 .macro inc_value
                                 	inc @0
                                 	sts @1, @0
                                 .endmacro
                                 
                                 //@0=register, @1=dseg name
                                 .macro dec_value
                                 	dec @0
                                 	sts @1, @0
                                 .endmacro
                                 
                                 //@0=register, @1=value, @2=dseg name
                                 .macro set_value
                                 	ldi @0, @1
                                 	sts @2, @0
                                 .endmacro 
                                 
                                 .macro clear
                                 	ldi YL, low(@0)
                                 	ldi YH, high(@0)
                                 	clr temp
                                 	st Y+, temp
                                 	st Y, temp
                                 .endmacro
                                 
                                 //used in insert_request to get negative flag in sreg
                                 .macro test_neg
                                 	mov @0, @1
                                 	sub @0, @2
                                 	in @0, sreg
                                 	lsr @0           
                                 	lsr @0
                                 	lsr @0
                                 	lsr @0
                                 	andi @0, 0x01
                                 .endmacro
                                 
                                 ////////////can be used for debugging////////////////
                                 .macro test_before
                                 	sbi porta, 1
                                 	ldi countl, low(400)
                                 	ldi counth, high(400)
                                 	rcall nested_delay
                                 .endmacro
                                 
                                 .macro test_after
                                 	cbi porta, 1
                                 	ldi countl, low(400)
                                 	ldi counth, high(400)
                                 	rcall nested_delay
                                 .endmacro
                                 
                                 .macro enable_int
                                 	in temp, EIMSK
                                 	ori temp, 1<<@0
                                 	out EIMSK, temp
                                 .endmacro
                                 
                                 .macro disable_int
                                 	in temp, EIMSK
                                 	andi temp, ~(1<<@0)
                                 	out EIMSK, temp
                                 .endmacro
                                 
                                 .macro opening_door
                                 	ldi com_match_l, open
                                 	sts door_state, com_match_l
                                 	//20% high = 13107
                                 	ldi com_match_l, low(13107)
                                 	ldi com_match_h, high(13107)
                                 	start_motor_t3 com_match_l, com_match_h
                                 .endmacro
                                 
                                 .macro closing_door
                                 	ldi temp, 1
                                 	sts door_closing, temp
                                 	//80% high = 52428
                                 	ldi com_match_l, low(52428)
                                 	ldi com_match_h, high(52428)
                                 	start_motor_t3 com_match_l, com_match_h
                                 .endmacro
                                 
                                 .macro enable_ovf
                                 	ldi temp, 1<<@0
                                 	sts @1, temp
                                 	clear @2
                                 .endmacro
                                 
                                 .macro disable_timer
                                 	clr temp
                                 	sts @0, temp
                                 	clear @1
                                 .endmacro
                                 
                                 .macro enable_keypad
                                 	ldi temp, 1<<TOIE4
                                 	sts TIMSK4, temp
                                 .endmacro
                                 
                                 .macro disable_keypad
                                 	clr temp
                                 	sts TIMSK4, temp
                                 .endmacro 
                                 
                                 
                                 .cseg
                                 //////////////////////////delay functions////////////////////////
                                 sleep_1ms:
000110 938f                      	push r24
000111 939f                      	push r25
000112 e09f                      	ldi r25, high(DELAY_1MS)
000113 e98c                      	ldi r24, low(DELAY_1MS)
                                 delayloop_1ms:
000114 9701                      	sbiw r25:r24, 1
000115 f7f1                      	brne delayloop_1ms
000116 919f                      	pop r25
000117 918f                      	pop r24
000118 9508                      	ret
                                 
                                 sleep_5ms:
000119 dff6                      	rcall sleep_1ms
00011a dff5                      	rcall sleep_1ms
00011b dff4                      	rcall sleep_1ms
00011c dff3                      	rcall sleep_1ms
00011d dff2                      	rcall sleep_1ms
00011e 9508                      	ret
                                 
                                 //argument: countl r24 and counth r25
                                 //each loop takes around 10 cycles
                                 //delay is nested. (if argument is 400, then 160000 loops and 1600000 cycles)
                                 nested_delay:
                                 	//prologue
00011f 93bf                      	push ih
000120 93af                      	push il
000121 93df                      	push ih2
000122 93cf                      	push il2
                                 	//body
000123 27bb                      	clr ih
000124 27aa                      	clr il
                                 d_outer_loop: 
000125 17a8                      	cp il, countl
000126 07b9                      	cpc ih, counth 
000127 f458                      	brsh d_done
000128 27dd                      	clr ih2
000129 27cc                      	clr il2
                                 d_inner_loop: //10 cycles
00012a 17c8                      	cp il2, countl; //1
00012b 07d9                      	cpc ih2, counth //1
00012c f420                      	brsh d_done_inner //1
00012d 9621                      	adiw ih2:il2, 1 //2
00012e 0000                      	nop //1
00012f 0000                      	nop //1
000130 cff9                      	rjmp d_inner_loop //3
                                 d_done_inner:
000131 9611                      	adiw ih:il, 1 
000132 cff2                      	rjmp d_outer_loop
                                 d_done:
                                 	//epilogue
000133 91cf                      	pop il2
000134 91df                      	pop ih2
000135 91af                      	pop il
000136 91bf                      	pop ih
000137 9508                      	ret
                                 
                                 /////////////////remove the first element from the request queue////////////
                                 dequeue_request:
000138 93ff                      	push zh
000139 93ef                      	push zl
00013a 936f                      	push temp
00013b 930f                      	push request_size
00013c 931f                      	push request_index
                                 
                                 	//shift everything in request queue: request(i) <- request(i+1)
00013d e0f2                      	ldi zh, high(request)
00013e e0e0                      	ldi zl, low(request)
00013f e011                      	ldi request_index, 1
                                 	//disable keypads for race condition
000140 2766
000141 9360 0072                 	disable_keypad
000143 9631                      	adiw z, 1
000144 9100 020e                 	lds request_size, rqs
                                 dequeue_request_loop:
000146 1710                      	cp request_index, request_size
000147 f029                      	breq dequeue_request_end
000148 8160                      	ld temp, z
000149 9362                      	st -z, temp
00014a 9632                      	adiw z, 2
00014b 9513                      	inc request_index
00014c cff9                      	rjmp dequeue_request_loop
                                 dequeue_request_end:
00014d 950a
00014e 9300 020e                 	dec_value request_size, rqs
000150 d086
000151 df0a                      	refresh_lcd
000152 e061
000153 9360 0072                 	enable_keypad
000155 911f                      	pop request_index
000156 910f                      	pop request_size
000157 916f                      	pop temp
000158 91ef                      	pop zl
000159 91ff                      	pop zh
00015a 9508                      	ret
                                 
                                 //////////////////////insert a new request into request queue///////////////////
                                 //argument: r11=value to be inserted
                                 insert_request:
                                 	;prologue
00015b 931f                      	push aindex
00015c 932f                      	push aindexr
00015d 933f                      	push num
00015e 934f                      	push numr
00015f 935f                      	push reg_cur
000160 936f                      	push req_cur
000161 93bf                      	push xh
000162 93af                      	push xl
000163 93df                      	push yh
000164 93cf                      	push yl
                                 	//body
                                 	
000165 90a0 020e                 	lds asize, rqs
000167 2d2a                      	mov aindexr, asize
000168 9050 020c                 	lds cur_f, current_floor
00016a 9060 020d                 	lds dir, current_direction
00016c e010                      	ldi aindex, low(request)
00016d 2e81                      	mov r8, aindex
00016e e012                      	ldi aindex, high(request)
00016f 2e91                      	mov r9, aindex
000170 2711                      	clr aindex
                                 
                                 	//new bit for test conditions
000171 2766                      	clr req_cur
000172 2d6b
000173 1965
000174 b76f
000175 9566
000176 9566
000177 9566
000178 9566
000179 7061                      	test_neg req_cur, value, cur_f, dir
                                 
                                 	; y points to start of array
00017a 2db9                      	mov xh, r9
00017b 2da8                      	mov xl, r8
                                 	
                                 	; z points to end of array
00017c 2dc8                      	mov yl, r8
00017d 2dd9                      	mov yh, r9
00017e 2411                      	clr r1
00017f 0dca                      	add yl, asize
000180 1dd1                      	adc yh, r1
                                 
                                 outer_loop:
000181 151a                      	cp aindex, asize
000182 f524                      	brge end_outer
000183 913d                      	ld	num, x+
                                 
                                 	////new bit for test conditions
000184 2755                      	clr reg_cur
000185 2f53
000186 1955
000187 b75f
000188 9556
000189 9556
00018a 9556
00018b 9556
00018c 7051                      	test_neg reg_cur, num, cur_f, dir
                                 	//
                                 	
00018d 1756                      	cp reg_cur, req_cur
00018e f439                      	brne mid_check
                                 	//register floor - current floor is same sign with requested floor - current floor
                                 	//potential insert
00018f 16b3                      	cp value, num
000190 f109                      	breq end_insert
                                 
                                 	//change
                                 	//if registered floor - current floor is zero, no insert and check next registered floor
                                 	//if registered floor - current floor is negative, try insert using descending condition
                                 	//else registered floor - current floor is positive, try insert using ascending condition
000191 1653                      	cp cur_f, num
000192 f091                      	breq end_inner
000193 3051                      	cpi reg_cur, 1
000194 f039                      	breq descending_condition
000195 c003                      	rjmp ascending_condition
                                 
                                 mid_check:
                                 	//conditions
000196 1666                      	cp dir, req_cur
000197 f039                      	breq inner_loop
000198 c00c                      	rjmp end_inner
                                 
                                 ascending_condition:
000199 16b3                      	cp value, num
00019a f454                      	brge end_inner
00019b c003                      	rjmp inner_loop 
                                 
                                 descending_condition:
00019c 153b                      	cp num, value
00019d f43c                      	brge end_inner
00019e c000                      	rjmp inner_loop 
                                 
                                 // inserting
                                 inner_loop:
00019f 1712                      	cp aindex, aindexr
0001a0 f434                      	brge end_outer
0001a1 914a                      	ld numr, -y
0001a2 8349                      	std y+1, numr
0001a3 952a                      	dec aindexr
0001a4 cffa                      	rjmp inner_loop
                                 end_inner:
0001a5 9513                      	inc aindex
0001a6 cfda                      	rjmp outer_loop
                                 end_outer:
                                 	; insert value in array and inc r24
0001a7 2799                      	clr r25
0001a8 16a9                      	cp asize, r25 
0001a9 f021                      	breq no_dec_insert; array has 0 length, no pre-decr insert
0001aa 151a                      	cp aindex, asize
0001ab f011                      	breq no_dec_insert;
0001ac 92be                      	st -x, value
0001ad c001                      	rjmp incr
                                 no_dec_insert:
0001ae 92bc                      	st x, value
                                 incr:
0001af 94a3
0001b0 92a0 020e                 	inc_value asize, rqs
                                 end_insert:
                                 	;epilogue
0001b2 91cf                      	pop yl
0001b3 91df                      	pop yh
0001b4 91af                      	pop xl
0001b5 91bf                      	pop xh
0001b6 916f                      	pop req_cur
0001b7 915f                      	pop reg_cur
0001b8 914f                      	pop numr
0001b9 913f                      	pop num
0001ba 912f                      	pop aindexr
0001bb 911f                      	pop aindex
0001bc 9508                      	ret
                                 
                                 /////////////updates floor number based on current direction//////////////////
                                 update_floor:
                                 	//prologue
0001bd 936f                      	push temp
0001be 935f                      	push cur_floor
0001bf 932f                      	push direction
                                 	//body 
0001c0 9160 0200                 	lds temp, request
0001c2 9150 020c                 	lds cur_floor, current_floor
                                 update_floor_num:
0001c4 9120 020d                 	lds direction, current_direction
0001c6 3020                      	cpi direction, ascend
0001c7 f039                      	breq update_floor_asc
0001c8 3021                      	cpi direction, descend
0001c9 f049                      	breq update_floor_desc
                                 end_update_floor_num:		
0001ca d034                      	rcall lift_floor_display
                                 	//epilogue
0001cb 912f                      	pop direction
0001cc 915f                      	pop cur_floor
0001cd 916f                      	pop temp
0001ce 9508                      	ret
                                 
                                 update_floor_asc:
0001cf 9553
0001d0 9350 020c                 	inc_value cur_floor, current_floor
0001d2 cff7                      	rjmp end_update_floor_num
                                 
                                 update_floor_desc:
0001d3 955a
0001d4 9350 020c                 	dec_value cur_floor, current_floor
0001d6 cff3                      	rjmp end_update_floor_num
                                 
                                 /////////////updates direction based on first element in request queue//////////////////
                                 update_direction:
                                 	//prologue
0001d7 936f                      	push temp
0001d8 935f                      	push cur_floor
0001d9 932f                      	push direction
                                 
0001da 9160 0200                 	lds temp, request
0001dc 9150 020c                 	lds cur_floor, current_floor
0001de 1756                      	cp cur_floor, temp
0001df f034                      	brlt set_to_asc
0001e0 1765                      	cp temp, cur_floor
0001e1 f044                      	brlt set_to_desc
                                 update_direction_end:
                                 	//epilogue
0001e2 912f                      	pop direction
0001e3 915f                      	pop cur_floor
0001e4 916f                      	pop temp
0001e5 9508                      	ret
                                 
                                 set_to_asc:
0001e6 e020
0001e7 9320 020d                 	set_value direction, ascend, current_direction
0001e9 cff8                      	rjmp update_direction_end
                                 
                                 set_to_desc:
0001ea e021
0001eb 9320 020d                 	set_value direction, descend, current_direction
0001ed cff4                      	rjmp update_direction_end
                                 #endif
                                  .include "LED.asm"
                                 
                                  * LED.asm
                                  *
                                  *  Created: 8/9/2023 7:20:34 PM
                                  *   Author: Bertram
                                  */
                                  
                                 
                                 
                                  #ifndef _LED_
                                  #define _LED_
                                  .include "utility.asm"
                                 
                                  * utility.asm
                                  *
                                  *  Created: 8/10/2023 12:35:22 AM
                                  *   Author: Bertram
                                  */ 
                                 .include "motor.asm"
                                 
                                  * motor.asm
                                  *
                                  *  Created: 8/9/2023 7:21:51 PM
                                  *   Author: Bertram
                                  */ 
                                 
                                  #ifndef _MOTOR_
                                 #endif
                                 .include "LCD.asm"
                                 
                                  * LCD.asm
                                  *
                                  *  Created: 8/9/2023 7:20:47 PM
                                  *   Author: Bertram
                                  */ 
                                 
                                  #ifndef _LCD_
                                 #endif
                                 .include "keypad.asm"
                                 
                                  * keypad.asm
                                  *
                                  *  Created: 8/9/2023 7:21:05 PM
                                  *   Author: Bertram
                                  */
                                 
                                  #ifndef _KEYPAD_
                                 #endif
                                 
                                 #ifndef _UTILITY_
                                 #endif
                                 
                                 //symbolic names in blink
                                 .def lfd_arg=r15
                                 .def countl=r24
                                 .def counth=r25
                                 
                                 
                                 //symbolic names in lift_floor_display function
                                 .def lfd_i=r16
                                 .def lfd_bitPC=r17
                                 .def lfd_bitPG=r18
                                 .def lfd_temp=r19
                                 .def lfd_floor=r15
                                 
                                 
                                 .cseg
                                 /////////////////////////////blinking LED///////////////////
                                 //executes a LED blinking cycle 
                                 //each blinking cycle takes 0.5 seconds
                                 blink:
                                 	//prologue
0001ee 938f                      	push countl
0001ef 939f                      	push counth
0001f0 936f                      	push temp
                                 	//body
0001f1 e788                      	ldi countl, low(632)
0001f2 e092                      	ldi counth, high(632)
0001f3 df2b                      	rcall nested_delay
0001f4 2766                      	clr temp
0001f5 b968                      	out PORTC, temp
0001f6 bb64                      	out PORTG, temp
0001f7 e788                      	ldi countl, low(632)
0001f8 e092                      	ldi counth, high(632)
0001f9 df25                      	rcall nested_delay
0001fa d004                      	rcall lift_floor_display
                                 	//epilogue
0001fb 916f                      	pop temp
0001fc 919f                      	pop counth
0001fd 918f                      	pop countl
0001fe 9508                      	ret 
                                 
                                 //////////////////////display floor number on LED////////////////////
                                 lift_floor_display:
                                 	//prologue
0001ff 93cf                      	push yl
000200 93df                      	push yh
000201 92ff                      	push r15
000202 930f                      	push r16
000203 931f                      	push r17
000204 932f                      	push r18
000205 933f                      	push r19
000206 b7cd                      	in yl, spl
000207 b7de                      	in yh, sph
                                 
000208 2711                      	clr lfd_bitPC
000209 2722                      	clr lfd_bitPG
00020a 2700                      	clr lfd_i
00020b b918                      	out PORTC, lfd_bitPC
00020c bb14                      	out PORTG, lfd_bitPC
                                 
00020d 90f0 020c                 	lds lfd_floor, current_floor
                                 loop:
00020f 150f                      	cp lfd_i, lfd_floor
000210 f041                      	breq load_port
000211 0f11
000212 9513                      	shiftl_inc lfd_bitPC
000213 f010                      	brcs shiftl_inc_PG
                                 loop_c:
000214 9503                      	inc lfd_i
000215 cff9                      	rjmp loop
                                 
                                 shiftl_inc_PG:
000216 0f22
000217 9523                      	shiftl_inc lfd_bitPG
000218 cffb                      	rjmp loop_c
                                 
                                 load_port: 
000219 b918                      	out PORTC, lfd_bitPC
00021a bb24                      	out PORTG, lfd_bitPG
00021b ef3f                      	ser lfd_temp
00021c b937                      	out DDRC, lfd_temp
00021d bb33                      	out DDRG, lfd_temp
                                 
                                 lift_floor_display_end:
00021e 913f                      	pop r19
00021f 912f                      	pop r18
000220 911f                      	pop r17
000221 910f                      	pop r16
000222 90ff                      	pop r15
000223 91df                      	pop yh
000224 91cf                      	pop yl
000225 9508                      	ret
                                 #endif
                                 
                                  //symbolic names in serving state
                                 .def cur_floor=r21
                                 .def next_stop=r3
                                 
                                 //symbolic names in emergency state
                                 .def cur_floor=r21
                                 .def ktemp=r16
                                 .def row =r17
                                 .def col =r24
                                 .def mask =r19
                                 
                                 //symbolic names in stop_state
                                 .def pressed_open_close=r20
                                 .def blink_counter=r19
                                 .def com_match_l=r17
                                 .def com_match_h=r23
                                 .def cur_floor_stop=r21
                                 
                                 //symbolic names in empty_queue_state
                                 .def request_size=r16
                                 
                                 .cseg
                                  ///////////serving_state//////////////
                                 serving_request_state:
000226 9100 020e                 	lds request_size, rqs
000228 3000                      	cpi request_size, 0
                                 	//transition to idle state as request queue is empty
000229 f109                      	breq empty_queue_state
                                 	//enable timer0 for led and floor movement
00022a e061
00022b 9360 006e
00022d e0ca
00022e e0d2
00022f 2766
000230 9369
000231 8368                      	enable_ovf TOIE0, TIMSK0, temp_counter_two_sec
                                 serving_request_state_loop:
                                 	// request queue not empty, lift moves
000232 9030 0200                 	lds next_stop, request //get the first element in request queue
000234 9150 020c                 	lds cur_floor, current_floor
000236 1553                      	cp  cur_floor, next_stop
                                 	// check if lift has arrived
000237 f7d1                      	brne serving_request_state_loop
                                 	//lift has arrived requested stop
                                 	//disable timer0 overflow interrupt to stop LED floor update
000238 2766
000239 9360 006e
00023b e0ca
00023c e0d2
00023d 2766
00023e 9369
00023f 8368                      	disable_timer TIMSK0, temp_counter_two_sec
                                 	//remove the floor that we will serve from the queue
000240 def7                      	rcall dequeue_request
                                 serving_request_stopping:
                                 	//transition to stop state
000241 d01e                      	rcall stop_state
                                 	//returned from stop state
                                 	//enable timer0 overflow interrupt for LED floor update
000242 e061
000243 9360 006e
000245 e0ca
000246 e0d2
000247 2766
000248 9369
000249 8368                      	enable_ovf TOIE0, TIMSK0, temp_counter_two_sec
00024a cfdb                      	rjmp serving_request_state
                                 //////////serving_state_end///////////////
                                 
                                 /////////////empty queue state/////////////
                                 empty_queue_state:
                                 	//disable timer0ovf interrupt to stop LED floor update
00024b 2766
00024c 9360 006e
00024e e0ca
00024f e0d2
000250 2766
000251 9369
000252 8368                      	disable_timer TIMSK0, temp_counter_two_sec
                                 empty_queue_state_loop:
000253 9100 020e                 	lds request_size, rqs
000255 3000                      	cpi request_size, 0
                                 	//check if request queue is still empty
000256 f3e1                      	breq empty_queue_state_loop
                                 	//enable timer0ovf interrupt for LED floor update
000257 e061
000258 9360 006e
00025a e0ca
00025b e0d2
00025c 2766
00025d 9369
00025e 8368                      	enable_ovf TOIE0, TIMSK0, temp_counter_two_sec
00025f cfc6                      	rjmp serving_request_state
                                 /////////////empty_queue_state end/////////////
                                 
                                  ////////////stop_state/////////////
                                 stop_state:
                                 	//prologue
000260 93cf                      	push yl
000261 93df                      	push yh
000262 936f                      	push temp
000263 931f                      	push com_match_l
000264 937f                      	push com_match_h
000265 934f                      	push pressed_open_close
000266 933f                      	push blink_counter
                                 stop_starting_sequence:
000267 2744                      	clr pressed_open_close
000268 2733                      	clr blink_counter
                                 	//opening door, press closed has no effect as the interrupts are disabled
000269 e011
00026a 9310 020f
00026c e313
00026d e373
00026e 9310 009a
000270 9370 009b
000272 e061
000273 9360 0091
000275 e261
000276 9360 0090                 	opening_door
                                 	//blinks for one second
000278 df75                      	rcall blink
000279 df74                      	rcall blink
00027a 2766
00027b 9360 0091
00027d 9360 0090
00027f 9360 009a
000281 9360 009b
000283 9160 0210
000285 3060
000286 f031
000287 e062
000288 9360 020f
00028a 2766
00028b 9360 0210                 	stop_motor_t3
                                 	//enable press button for door close and open
00028d b36d
00028e 6061
00028f bb6d                      	enable_int INT0
000290 b36d
000291 6062
000292 bb6d                      	enable_int INT1
                                 stop_state_loop:
                                 	//blink for 3 seconds
000293 3036                      	cpi blink_counter, 6
000294 f42c                      	brge stop_ending_sequence
000295 df58                      	rcall blink
000296 940c 02d1                 	jmp stop_state_case
                                 stop_state_case_end:
000298 9533                      	inc blink_counter
000299 cff9                      	rjmp stop_state_loop
                                 stop_ending_sequence:
                                 	//blinks for one second
00029a e061
00029b 9360 0210
00029d ec1c
00029e ec7c
00029f 9310 009a
0002a1 9370 009b
0002a3 e061
0002a4 9360 0091
0002a6 e261
0002a7 9360 0090                 	closing_door
0002a9 df44                      	rcall blink
0002aa 3041                      	cpi pressed_open_close, open
0002ab f1e9                      	breq back_to_start
0002ac df41                      	rcall blink
0002ad 3041                      	cpi pressed_open_close, open
0002ae f1d1                      	breq back_to_start
0002af 2766
0002b0 9360 0091
0002b2 9360 0090
0002b4 9360 009a
0002b6 9360 009b
0002b8 9160 0210
0002ba 3060
0002bb f031
0002bc e062
0002bd 9360 020f
0002bf 2766
0002c0 9360 0210                 	stop_motor_t3
                                 	//disable_int0 and int1
0002c2 b36d
0002c3 7f6e
0002c4 bb6d                      	disable_int INT0
0002c5 b36d
0002c6 7f6d
0002c7 bb6d                      	disable_int INT1
0002c8 2744                      	clr pressed_open_close
                                 	//epilogue
0002c9 913f                      	pop blink_counter
0002ca 914f                      	pop pressed_open_close
0002cb 917f                      	pop com_match_h
0002cc 911f                      	pop com_match_l
0002cd 916f                      	pop temp
0002ce 91df                      	pop yh
0002cf 91cf                      	pop yl
0002d0 9508                      	ret
                                 
                                 stop_state_case:
0002d1 3041                      	cpi pressed_open_close, open
0002d2 f021                      	breq stop_state_press_open
0002d3 3042                      	cpi pressed_open_close, close
0002d4 f081                      	breq stop_state_press_close
0002d5 940c 0298                 	jmp stop_state_case_end
                                 
                                 stop_state_press_open:
0002d7 2744                      	clr pressed_open_close
0002d8 eb88                      	ldi countl, low(440)
0002d9 e091                      	ldi counth, high(440)
0002da de44                      	rcall nested_delay
0002db b169                      	in temp, PIND
0002dc 7062                      	andi temp, 0b00000010
0002dd 3062                      	cpi temp, 2
                                 	//branch if pb1 is deasserted, user not holding button
0002de f061                      	breq go_to_loop
                                 	//button is being held
                                 stop_state_press_open_loop:
0002df b169                      	in temp, PIND
0002e0 7062                      	andi temp, 0b00000010
0002e1 3062                      	cpi temp, 2
                                 	//branch if pb1 is deasserted
0002e2 f021                      	breq go_to_end
0002e3 df0a                      	rcall blink
0002e4 cffa                      	rjmp stop_state_press_open_loop
                                 
                                 stop_state_press_close:
0002e5 2744                      	clr pressed_open_close
0002e6 cfb3                      	rjmp stop_ending_sequence
                                 
                                 go_to_end:
0002e7 940c 029a                 	jmp stop_ending_sequence
                                 
                                 back_to_start:
0002e9 940c 0267                 	jmp stop_starting_sequence
                                 
                                 go_to_loop:
0002eb e030                      	ldi blink_counter, 0
0002ec 940c 0293                 	jmp stop_state_loop
                                 ////////////stop_state end/////////////
                                 
                                 
                                 ///////////emergency state//////////////
                                 emergency_state:
0002ee 2766
0002ef 9360 0072                 	disable_keypad
0002f1 b36d
0002f2 7f6e
0002f3 bb6d                      	disable_int INT0
0002f4 b36d
0002f5 7f6d
0002f6 bb6d                      	disable_int INT1
0002f7 9100 020f                 	lds ktemp, door_state
0002f9 3001                      	cpi ktemp, open
0002fa f5b9                      	brne emergency_door_closed
0002fb 2766
0002fc 9360 0091
0002fe 9360 0090
000300 9360 009a
000302 9360 009b
000304 9160 0210
000306 3060
000307 f031
000308 e062
000309 9360 020f
00030b 2766
00030c 9360 0210                 	stop_motor_t3
00030e e061
00030f 9360 0210
000311 ec1c
000312 ec7c
000313 9310 009a
000315 9370 009b
000317 e061
000318 9360 0091
00031a e261
00031b 9360 0090                 	closing_door
00031d ded0                      	rcall blink
00031e decf                      	rcall blink
00031f 2766
000320 9360 0091
000322 9360 0090
000324 9360 009a
000326 9360 009b
000328 9160 0210
00032a 3060
00032b f031
00032c e062
00032d 9360 020f
00032f 2766
000330 9360 0210                 	stop_motor_t3
                                 emergency_door_closed:
000332 e061
000333 9360 006e
000335 e0ca
000336 e0d2
000337 2766
000338 9369
000339 8368                      	enable_ovf TOIE0, TIMSK0, temp_counter_two_sec
00033a e001                      	ldi ktemp, 1
00033b 9300 0200                 	sts request, ktemp
00033d 9300 020e                 	sts rqs, ktemp
00033f de97
000340 dd1b                      	refresh_lcd
000341 eb88                      	ldi countl, low(440)
000342 e091                      	ldi counth, high(440)
000343 9478                      	sei
                                 emergency_loop:
000344 9a11                      	sbi portA, 1
000345 ddd9                      	rcall nested_delay
000346 9811                      	cbi portA, 1
000347 ddd7                      	rcall nested_delay
000348 9150 020c                 	lds cur_floor, current_floor
00034a 3051                      	cpi cur_floor, 1
00034b f7c1                      	brne emergency_loop
00034c 2766
00034d 9360 006e
00034f e0ca
000350 e0d2
000351 2766
000352 9369
000353 8368                      	disable_timer TIMSK0, temp_counter_two_sec
000354 e001
000355 dd99
000356 dda8                      	do_lcd_command 0b00000001
000357 e405
000358 dd9d
000359 dda5                      	do_lcd_data 'E'
00035a e60d
00035b dd9a
00035c dda2                      	do_lcd_data 'm'
00035d e605
00035e dd97
00035f dd9f                      	do_lcd_data 'e'
000360 e702
000361 dd94
000362 dd9c                      	do_lcd_data 'r'
000363 e607
000364 dd91
000365 dd99                      	do_lcd_data 'g'
000366 e605
000367 dd8e
000368 dd96                      	do_lcd_data 'e'
000369 e60e
00036a dd8b
00036b dd93                      	do_lcd_data 'n'
00036c e603
00036d dd88
00036e dd90                      	do_lcd_data 'c'
00036f e709
000370 dd85
000371 dd8d                      	do_lcd_data 'y'
000372 ec00
000373 dd7b
000374 dd8a                      	do_lcd_command 0b11000000
000375 e403
000376 dd7f
000377 dd87                      	do_lcd_data 'C'
000378 e601
000379 dd7c
00037a dd84                      	do_lcd_data 'a'
00037b e60c
00037c dd79
00037d dd81                      	do_lcd_data 'l'
00037e e60c
00037f dd76
000380 dd7e                      	do_lcd_data 'l'
000381 e104
000382 dd6c
000383 dd7b                      	do_lcd_command 0b00010100
000384 e300
000385 dd70
000386 dd78                      	do_lcd_data '0'
000387 e300
000388 dd6d
000389 dd75                      	do_lcd_data '0'
00038a e300
00038b dd6a
00038c dd72                      	do_lcd_data '0'
00038d e00c
00038e dd60
00038f dd6f                      	do_lcd_command 0b00001100
000390 decf                      	rcall stop_state
                                 // infinite loop for waiting
                                 emergency_loop_wait:
000391 9a11                      	sbi portA, 1
000392 2700                      	clr ktemp
000393 ee3f                      	ldi mask, INITCOLMASK
000394 2788                      	clr col 
                                 	// monitor asterik key
                                 	// col: 0
                                 	// row: 3
                                 emergency_loop_col:
000395 9330 010b                 	STS PORTL, mask 
000397 ef0f                      	ldi ktemp, 0xFF 	
                                 emergency_loop_delay:
000398 950a                      	dec ktemp
000399 f7f1                      	brne emergency_loop_delay
00039a 9100 0109                 	LDS ktemp, PINL 
00039c 700f                      	andi ktemp, ROWMASK 
00039d 300f                      	cpi ktemp, 0xF 
00039e f079                      	breq emergency_loop_nextcol
00039f e031                      	ldi mask, INITROWMASK 
0003a0 2711                      	clr row 
                                 emergency_loop_row:      
0003a1 2f40                      	mov ktemp2, ktemp
0003a2 2343                      	and ktemp2, mask 
0003a3 f431                      	brne emergency_loop_skipconv 
                                 	// this checks the location of the asterisk button
                                 	// continues infinite loop if not asterisk button
0003a4 3080                      	cpi col, 0
0003a5 f759                      	brne emergency_loop_wait
0003a6 3013                      	cpi row, 3
0003a7 f749                      	brne emergency_loop_wait
0003a8 940c 03b5                 	jmp emergency_reset
                                 emergency_loop_skipconv:
0003aa 9513                      	inc row 
0003ab 0f33                      	lsl mask 
0003ac 940c 03a1                 	jmp emergency_loop_row       
                                 emergency_loop_nextcol:     
0003ae 3083                      	cpi col, 3 
                                 	// jump to infinite loop and scan again if column reaches max
0003af f309                      	breq emergency_loop_wait
0003b0 9408                      	sec 
0003b1 1f33                      	rol mask 
0003b2 9583                      	inc col 
0003b3 940c 0395                 	jmp emergency_loop_col
                                 emergency_reset:
0003b5 940c 0488                 	jmp reset
                                 //////////emergency state end//////////////
                                  #endif
                                 
                                  //symbolic names in keypad functions, args is r21 and r18
                                 .def ktemp =r16
                                 .def row =r17
                                 .def col =r24
                                 .def mask =r19
                                 .def ktemp2 =r20
                                 .def outputBits = r23
                                 .def i = r22
                                 .def ledValue = r26
                                 
                                 .equ PORTLDIR = 0xF0
                                 .equ INITCOLMASK = 0xEF
                                 .equ INITROWMASK = 0x01
                                 .equ ROWMASK = 0x0F
                                 
                                 .cseg
                                 keypad:
0003b7 930f                      	push ktemp
0003b8 931f                      	push row
0003b9 938f                      	push col
0003ba 933f                      	push mask
0003bb 934f                      	push ktemp2
0003bc 937f                      	push outputBits
0003bd 936f                      	push i
0003be 93af                      	push ledValue
                                 
0003bf 2700                      	clr ktemp
0003c0 ee3f                      	ldi mask, INITCOLMASK
0003c1 2788                      	clr col 
                                 
                                 colloop:
0003c2 9330 010b                 	STS PORTL, mask 
0003c4 ef0f                      	ldi ktemp, 0xFF 
                                 	
                                 delay:
0003c5 950a                      	dec ktemp
0003c6 f7f1                      	brne delay
0003c7 9100 0109                 	LDS ktemp, PINL 
0003c9 700f                      	andi ktemp, ROWMASK 
0003ca 300f                      	cpi ktemp, 0xF 
0003cb f061                      	breq nextcol
0003cc e031                      	ldi mask, INITROWMASK 
0003cd 2711                      	clr row 
                                 	
                                 rowloop:      
0003ce 2f40                      	mov ktemp2, ktemp
0003cf 2343                      	and ktemp2, mask 
0003d0 f419                      	brne skipconv 
0003d1 d017                      	rcall LED 
0003d2 940c 03df                 	jmp keypad_end
                                 	
                                 skipconv:
0003d4 9513                      	inc row 
0003d5 0f33                      	lsl mask 
0003d6 940c 03ce                 	jmp rowloop          
                                 
                                 nextcol:     
0003d8 3083                      	cpi col, 3 
0003d9 f029                      	breq keypad_end
0003da 9408                      	sec 
0003db 1f33                      	rol mask 
0003dc 9583                      	inc col 
0003dd 940c 03c2                 	jmp colloop 
                                 
                                 keypad_end:
0003df 9811                      	cbi portA, 1
0003e0 91af                      	pop ledValue
0003e1 916f                      	pop i
0003e2 917f                      	pop outputBits
0003e3 914f                      	pop ktemp2
0003e4 913f                      	pop mask
0003e5 918f                      	pop col
0003e6 911f                      	pop row
0003e7 910f                      	pop ktemp
0003e8 9508                      	ret
                                 
                                 // LED FUNCTION //
                                 //args is curr_florr r21 and direction r18
                                 LED:
0003e9 938f                      	push col
0003ea 931f                      	push row
0003eb 930f                      	push ktemp
                                 	// added
0003ec 934f                      	push ktemp2
0003ed 933f                      	push mask
                                 	//
0003ee 937f                      	push outputBits
0003ef 93af                      	push ledValue
0003f0 925f                      	push cur_f
0003f1 926f                      	push dir
0003f2 928f                      	push r8
0003f3 929f                      	push r9
0003f4 92af                      	push asize
0003f5 92bf                      	push value
                                 
                                 	// column 3 is not needed for output
0003f6 3083                      	cpi col, 3 
0003f7 f0c9                      	breq LED_end
                                 	// check the columns in row 3
0003f8 3013                      	cpi row, 3 
0003f9 f099                      	breq LED_check 
                                 	
                                 	// either value 1-9 is stored in ktemp, depends on which key was pressed
0003fa 2f01                      	mov ktemp, row 
0003fb 0f00                      	lsl ktemp
0003fc 0f01                      	add ktemp, row 
0003fd 0f08                      	add ktemp, col 
0003fe 9503                      	inc ktemp 
                                 	
                                 	// general implementation to output floors in the LED
                                 inserting:
0003ff 2eb0                      	mov value, ktemp 
000400 9100 020c                 	lds ktemp, current_floor
000402 150b                      	cp ktemp, value
000403 f021                      	breq insert_is_current
                                 insert_check_end:
000404 dd56                      	rcall insert_request
000405 ddd1
000406 dc55                      	refresh_lcd
000407 c009                      	rjmp LED_end
                                 
                                 insert_is_current:
000408 9100 020f                 	lds ktemp, door_state
00040a 3002                      	cpi ktemp, close
00040b f3c1                      	breq insert_check_end
00040c c004                      	rjmp LED_end
                                 	//potential addition
                                 	
                                 
                                 LED_check:
                                 	// only column 0 and 1 are needed because the * and 0 key are in those columns
00040d 3080                      	cpi col, 0
00040e f099                      	breq output_LED_star
00040f 3081                      	cpi col, 1
000410 f071                      	breq output_LED_tenth
                                 
                                 LED_end:
000411 90bf                      	pop value
000412 90af                      	pop asize
000413 909f                      	pop r9
000414 908f                      	pop r8
000415 906f                      	pop dir
000416 905f                      	pop cur_f
000417 918f                      	pop col
000418 911f                      	pop row
000419 913f                      	pop mask
00041a 914f                      	pop ktemp2
00041b 910f                      	pop ktemp
00041c 917f                      	pop outputBits
00041d 91af                      	pop ledValue
00041e 9508                      	ret
                                 	
                                 output_LED_tenth:
00041f e00a                      	ldi ktemp, 10
000420 940c 03ff                 	jmp inserting
                                 
                                 output_LED_star:
000422 940c 02ee                 	jmp emergency_state
                                 #endif
                                 
                                 #ifndef _UTILITY_
                                 #endif
                                 .include "ext_interrupts.asm"
                                 
                                  * ext_interrupts.asm
                                  *
                                  *  Created: 8/10/2023 1:32:09 AM
                                  *   Author: Bertram
                                  */ 
                                 
                                  #ifndef _ext_interrupts_
                                  #define _ext_interrupts_
                                  .include "utility.asm"
                                 
                                  * utility.asm
                                  *
                                  *  Created: 8/10/2023 12:35:22 AM
                                  *   Author: Bertram
                                  */ 
                                 .include "motor.asm"
                                 
                                  * motor.asm
                                  *
                                  *  Created: 8/9/2023 7:21:51 PM
                                  *   Author: Bertram
                                  */ 
                                 
                                  #ifndef _MOTOR_
                                 #endif
                                 .include "LCD.asm"
                                 
                                  * LCD.asm
                                  *
                                  *  Created: 8/9/2023 7:20:47 PM
                                  *   Author: Bertram
                                  */ 
                                 
                                  #ifndef _LCD_
                                 #endif
                                 .include "keypad.asm"
                                 
                                  * keypad.asm
                                  *
                                  *  Created: 8/9/2023 7:21:05 PM
                                  *   Author: Bertram
                                  */
                                 
                                  #ifndef _KEYPAD_
                                 #endif
                                 
                                 #ifndef _UTILITY_
                                 #endif
                                  .cseg
                                 
                                 ///////////////////external interrupt 0, corresponds to pb0 closing door///////////////////
                                 ext_int0:
                                 	//prologue
000424 936f                      	push temp
000425 b76f                      	in temp, sreg
000426 936f                      	push temp
000427 938f                      	push countl
000428 939f                      	push counth
                                 	//debouncing delay, around 30ms
000429 ed8c                      	ldi countl, low(220)
00042a e090                      	ldi counth, high(220)
00042b dcf3                      	rcall nested_delay
                                 
00042c b169                      	in temp, PIND
00042d 7061                      	andi temp, 1
00042e 3061                      	cpi temp, 1
                                 	//branch if pb0 is deasserted
00042f f009                      	breq ext_int0_end
000430 e042                      	ldi pressed_open_close, close
                                 
                                 ext_int0_end:
                                 	//writing 1 to EIFR
000431 b36c                      	in temp, EIFR
000432 6061                      	ori temp, 1
000433 bb6c                      	out EIFR, temp
                                     //epilogue
000434 919f                      	pop counth
000435 918f                      	pop countl
000436 916f                      	pop temp
000437 bf6f                      	out sreg, temp
000438 916f                      	pop temp
000439 9518                      	reti
                                 	
                                 ///////////////////external interrupt 1, corresponds to pb1 opening door///////////////////
                                 ext_int1:
                                 	//prologue
00043a 936f                      	push temp
00043b b76f                      	in temp, sreg
00043c 936f                      	push temp
00043d 938f                      	push countl
00043e 939f                      	push counth
                                 	//debouncing delay, around 30ms
00043f ed8c                      	ldi countl, low(220)
000440 e090                      	ldi counth, high(220)
000441 dcdd                      	rcall nested_delay
000442 b169                      	in temp, PIND
000443 7062                      	andi temp, 0b00000010
000444 3062                      	cpi temp, 2
                                 	//branch if pb1 is deasserted
000445 f009                      	breq ext_int1_end
000446 e041                      	ldi pressed_open_close, open
                                 
                                 
                                 ext_int1_end:
                                 	//writing 1 to EIFR
000447 b36c                      	in temp, EIFR
000448 6062                      	ori temp, (1<<1)
000449 bb6c                      	out EIFR, temp
                                     //epilogue
00044a 919f                      	pop counth
00044b 918f                      	pop countl
00044c 916f                      	pop temp
00044d bf6f                      	out sreg, temp
00044e 916f                      	pop temp
00044f 9518                      	reti
                                 #endif
                                 .include "timers.asm"
                                 
                                  * timer4.asm
                                  *
                                  *  Created: 8/9/2023 7:20:08 PM
                                  *   Author: Bertram
                                  */ 
                                  #ifndef _TIMERS_
                                  #define _TIMERS_
                                  .include "utility.asm"
                                 
                                  * utility.asm
                                  *
                                  *  Created: 8/10/2023 12:35:22 AM
                                  *   Author: Bertram
                                  */ 
                                 .include "motor.asm"
                                 
                                  * motor.asm
                                  *
                                  *  Created: 8/9/2023 7:21:51 PM
                                  *   Author: Bertram
                                  */ 
                                 
                                  #ifndef _MOTOR_
                                 #endif
                                 .include "LCD.asm"
                                 
                                  * LCD.asm
                                  *
                                  *  Created: 8/9/2023 7:20:47 PM
                                  *   Author: Bertram
                                  */ 
                                 
                                  #ifndef _LCD_
                                 #endif
                                 .include "keypad.asm"
                                 
                                  * keypad.asm
                                  *
                                  *  Created: 8/9/2023 7:21:05 PM
                                  *   Author: Bertram
                                  */
                                 
                                  #ifndef _KEYPAD_
                                 #endif
                                 
                                 #ifndef _UTILITY_
                                 #endif
                                 
                                  //symbolic names in timer4ovf
                                 .def t4Temp = r27
                                 .def t4TempLow = r28
                                 .def t4TempHigh = r29
                                 
                                  //symbolic names in timer0ovf
                                 .def t0_c_l=r24
                                 .def t0_c_h=r25
                                 .def t0_temp=r22
                                 
                                 .cseg
                                 //////////////////timer0 overflow interrupt subroutine///////////////
                                 //implemented as a counter. Calls update_direction, update_floor and update_lcd every
                                 //two seconds
                                 Timer0OVF:
                                 	//prologue
000450 936f                      	push t0_temp
000451 b76f                      	in t0_temp, sreg
000452 936f                      	push t0_temp
000453 93df                      	push yh
000454 93cf                      	push yl
000455 938f                      	push t0_c_l
000456 939f                      	push t0_c_h
                                 
                                 check_two_second:
                                 	//temp counter for two second
000457 9180 020a                 	lds t0_c_l, temp_counter_two_sec
000459 9190 020b                 	lds t0_c_h, temp_counter_two_sec+1
00045b 9601                      	adiw t0_c_h:t0_c_l, 1
00045c 3088                      	cpi t0_c_l, low(15624) 
00045d e36d                      	ldi t0_temp, high(15624)
00045e 0796                      	cpc t0_c_h, t0_temp
00045f f449                      	brne not_two_second
000460 dd76                      	rcall update_direction
000461 dd5b                      	rcall update_floor
000462 dbf9                      	rcall update_lcd
000463 e0ca
000464 e0d2
000465 2766
000466 9369
000467 8368                      	clear temp_counter_two_sec
000468 c005                      	rjmp t0_end_if
                                 
                                 not_two_second:
000469 9380 020a                 	sts temp_counter_two_sec, t0_c_l
00046b 9390 020b                 	sts temp_counter_two_sec+1, t0_c_h
00046d c000                      	rjmp t0_end_if
                                 	
                                 t0_end_if:
                                 	//epilogue
00046e 919f                      	pop t0_c_h
00046f 918f                      	pop t0_c_l
000470 91cf                      	pop yl
000471 91df                      	pop yh
000472 916f                      	pop t0_temp
000473 bf6f                      	out sreg, t0_temp
000474 916f                      	pop t0_temp
000475 9518                      	reti
                                 
                                 ///////////////////Timer4 overflow interrupt subroutine//////////////////////
                                 //used for keypad scanning
                                 //keypad is scanned every 0.3ms
                                 Timer4OVF:
000476 93bf                      	push t4Temp
000477 b7bf                      	in t4Temp, sreg
000478 93bf                      	push t4Temp
000479 93df                      	push yh
00047a 93cf                      	push yl
00047b 93cf                      	push t4TempLow
00047c 93df                      	push t4TempHigh
00047d df39                      	rcall keypad
00047e c000                      	rjmp t4_end_if
                                 
                                 	
                                 t4_end_if:
                                 	//epilogue
00047f 91df                      	pop t4TempHigh
000480 91cf                      	pop t4TempLow
000481 91cf                      	pop yl
000482 91df                      	pop yh
000483 91bf                      	pop t4Temp
000484 bfbf                      	out sreg, t4Temp
000485 91bf                      	pop t4Temp
000486 9518                      	reti
                                 #endif
                                 .include "states.asm"
                                 
                                  * states.asm
                                  *
                                  *  Created: 8/10/2023 3:42:50 AM
                                  *   Author: Bertram
                                  */
                                  #ifndef _STATES_
                                  #endif
                                 
                                 
                                 .equ descend=1
                                 .equ ascend=0
                                 .equ open=1
                                 .equ close=2
                                 
                                 //used everywhere
                                 .def temp=r22
                                 
                                 .dseg
                                 request:
000200                           	.byte 10
                                 temp_counter_two_sec:
00020a                           	.byte 2
                                 current_floor:
00020c                           	.byte 1
                                 current_direction:
00020d                           	.byte 1
                                 rqs:
00020e                           	.byte 1
                                 door_state:
00020f                           	.byte 1
                                 door_closing:
000210                           	.byte 1
                                 .cseg
                                 //////////////interrupt subroutine////////////////
                                 default:
000487 9518                      	reti
                                 
                                 reset:
                                 	//set up stack, no reserved local variable
000488 efcf                      	ldi yl, low(RAMEND)
000489 e2d1                      	ldi yh, high(RAMEND)
00048a bfde                      	out sph, yh
00048b bfcd                      	out spl, yl
                                 
00048c 9a6b                      	sbi DDRE, PE3	; switch on backlight
00048d 9a73                      	sbi PORTE, PE3
                                 
00048e e061                      	ldi temp, 0x01
00048f b967                      	out DDRC, temp
000490 b968                      	out PORTC, temp
000491 2766                      	clr temp
                                 
000492 c000                      	rjmp main
                                 
                                 main:
                                 	//initialize current floor, direction, queue size
                                 	//and state of door
000493 e051
000494 9350 020c                 	set_value cur_floor, 1, current_floor
000496 e020
000497 9320 020d                 	set_value direction, ascend, current_direction
000499 2766                      	clr temp
00049a 9360 020e                 	sts rqs, temp
00049c 9360 020f                 	sts door_state, temp
00049e 9360 0210                 	sts door_closing, temp
                                 	//initialize timer interrupts parameters
                                 	//not enabled yet
0004a0 2788                      	clr t0_c_l
0004a1 2799                      	clr t0_c_h
0004a2 27bb                      	clr t4Temp
0004a3 27cc                      	clr t4TempLow
0004a4 27dd                      	clr t4TempHigh
0004a5 2766                      	clr temp
0004a6 bd64                      	out TCCR0A, temp
0004a7 9360 00a0                 	sts TCCR4A, temp
0004a9 e062                      	ldi temp, 0b00000010
0004aa bd65                      	out TCCR0B, temp
0004ab 9360 0081                 	sts TCCR1B, temp
0004ad e062                      	ldi temp, (1 << CS41)
0004ae 9360 00a1                 	sts TCCR4B, temp
                                 	//initialize motor OC3B bit
0004b0 e160                      	ldi temp, 0b00010000 //set bit to output
0004b1 b96d                      	out DDRE, temp
                                 	//initialize external interrupt 0 and 1
                                 	//not enabled yet
0004b2 9160 0069                 	lds temp, EICRA
0004b4 6062                      	ori temp, (2<<ISC00)
0004b5 6068                      	ori temp, (2<<ISC10)
0004b6 9360 0069                 	sts EICRA, temp
                                 	//set up lcd
0004b8 ef6f                      	ser temp
0004b9 bb60                      	out DDRF, temp
0004ba b961                      	out DDRA, temp
0004bb 2766                      	clr temp
0004bc bb61                      	out PORTF, temp
0004bd b962                      	out PORTA, temp
0004be e308
0004bf dc2f
0004c0 dc3e                      	do_lcd_command 0b00111000 ; 2x5x7
0004c1 dc57                      	rcall sleep_5ms
0004c2 e308
0004c3 dc2b
0004c4 dc3a                      	do_lcd_command 0b00111000 ; 2x5x7
0004c5 dc4a                      	rcall sleep_1ms
0004c6 e308
0004c7 dc27
0004c8 dc36                      	do_lcd_command 0b00111000 ; 2x5x7
0004c9 e308
0004ca dc24
0004cb dc33                      	do_lcd_command 0b00111000 ; 2x5x7
0004cc e008
0004cd dc21
0004ce dc30                      	do_lcd_command 0b00001000 ; display off?
0004cf e001
0004d0 dc1e
0004d1 dc2d                      	do_lcd_command 0b00000001 ; clear display
0004d2 e006
0004d3 dc1b
0004d4 dc2a                      	do_lcd_command 0b00000110 ; increment, no display shift
0004d5 e00c
0004d6 dc18
0004d7 dc27                      	do_lcd_command 0b00001100 ; Cursor on, bar, no blink
                                 
                                 	//does once to display lcd first
0004d8 dcfe
0004d9 db82                      	refresh_lcd 
                                 	//initialize and enable keypads
0004da ef60                      	ldi temp, PORTLDIR 
0004db 9360 010a                 	sts DDRL, temp
0004dd e061
0004de 9360 0072                 	enable_keypad
                                 	//enable global interrupts
0004e0 9478                      	sei
                                 
0004e1 cd44                      	rjmp serving_request_state
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   3 y  :  18 z  :   4 r0 :   0 r1 :   2 r2 :   0 r3 :   2 r4 :   0 
r5 :   6 r6 :   4 r7 :   0 r8 :   5 r9 :   5 r10:  10 r11:  10 r12:   0 
r13:   0 r14:   0 r15:   4 r16: 130 r17:  52 r18:  24 r19:  35 r20:  24 
r21:  33 r22: 234 r23:  12 r24:  40 r25:  27 r26:  12 r27:  15 r28:  31 
r29:  31 r30:   3 r31:   3 
Registers used: 28 out of 35 (80.0%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   4 adiw  :   5 and   :   2 
andi  :  12 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   1 break :   0 breq  :  36 brge  :   5 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   3 brmi  :   0 
brne  :  12 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   7 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  55 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  18 cpc   :   3 
cpi   :  35 cpse  :   0 dec   :   5 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  21 inc   :  13 jmp   :  19 ld    :   3 ldd   :   0 ldi   : 148 
lds   :  31 lpm   :   0 lsl   :   5 lsr   :   8 mov   :  13 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   2 or    :   0 
ori   :   6 out   :  36 pop   :  92 push  :  92 rcall : 181 ret   :  17 
reti  :   5 rjmp  :  34 rol   :   2 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   9 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   2 seh   :   0 sei   :   2 sen   :   0 ser   :   3 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  19 std   :   1 sts   :  72 sub   :   2 subi  :   0 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 46 out of 116 (39.7%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009c4   2336      0   2336  262144   0.9%
[.dseg] 0x000200 0x000211      0     17     17    8192   0.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 53 warnings
